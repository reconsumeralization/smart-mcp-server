{
  "id": "readme-update-workflow",
  "description": "A workflow for automatically updating README documentation using the Google Gemini API",
  "concurrencyLimit": 2,
  "steps": [
    {
      "id": "analyze-current-readme",
      "toolId": "read_file",
      "params": {
        "target_file": "README.md",
        "should_read_entire_file": true
      }
    },
    {
      "id": "gather-project-changes",
      "toolId": "run_terminal_cmd",
      "params": {
        "command": "git log -n 10 --pretty=format:\"%h - %s\" | cat",
        "explanation": "Gathering recent project changes to include in the README",
        "is_background": false
      }
    },
    {
      "id": "research-documentation-standards",
      "toolId": "web_search",
      "params": {
        "search_term": "best practices for Node.js project README documentation structure",
        "explanation": "Researching current best practices for README documentation"
      }
    },
    {
      "id": "identify-key-sections",
      "toolId": "mcp_sequential_thinking_sequentialthinking",
      "params": {
        "thought": "Analyzing the existing README and project structure to identify key sections that need to be included in the updated documentation. Considering standard sections like introduction, installation, usage, API reference, configuration, contributing guidelines, and license information.",
        "thoughtNumber": 1,
        "totalThoughts": 3,
        "nextThoughtNeeded": true
      },
      "dependencies": [
        "analyze-current-readme", 
        "gather-project-changes",
        "research-documentation-standards"
      ]
    },
    {
      "id": "prepare-content-prompts",
      "toolId": "mcp_sequential_thinking_sequentialthinking",
      "params": {
        "thought": "Preparing specific prompts for each section of the README that will be generated by the Gemini API. Ensuring prompts include context about the project, its purpose, features, and recent changes.",
        "thoughtNumber": 2,
        "totalThoughts": 3,
        "nextThoughtNeeded": true
      },
      "dependencies": ["identify-key-sections"]
    },
    {
      "id": "setup-gemini-api",
      "toolId": "mcp_sequential_thinking_sequentialthinking",
      "params": {
        "thought": "Setting up parameters for the Gemini API calls, including model selection, temperature, and token limits appropriate for documentation generation. Lower temperature (0.3-0.5) for more consistent and fact-based generation.",
        "thoughtNumber": 3,
        "totalThoughts": 3,
        "nextThoughtNeeded": false
      },
      "dependencies": ["prepare-content-prompts"]
    },
    {
      "id": "generate-introduction-section",
      "toolId": "mcp_gemini_generate_text",
      "params": {
        "prompt": "Generate an introduction section for a README.md for a Node.js project called 'Smart MCP Server'. The project provides a context-aware tool server for managing and executing metaprotocols. Include what the project does, its key features, and why someone would want to use it. Recent changes include: ${steps.gather-project-changes.result}",
        "systemInstruction": "You are a technical documentation specialist who writes clear, concise, and informative documentation for software projects.",
        "temperature": 0.4,
        "maxTokens": 1000
      },
      "dependencies": ["setup-gemini-api"]
    },
    {
      "id": "generate-installation-section",
      "toolId": "mcp_gemini_generate_text",
      "params": {
        "prompt": "Generate an installation section for a README.md for a Node.js project called 'Smart MCP Server'. Include prerequisites, installation steps using npm, and any configuration required. The project requires Node.js v16+ and uses packages like express, node-fetch, and dotenv.",
        "systemInstruction": "You are a technical documentation specialist who writes clear, concise, and informative documentation for software projects.",
        "temperature": 0.3,
        "maxTokens": 800
      },
      "dependencies": ["setup-gemini-api"]
    },
    {
      "id": "generate-usage-examples",
      "toolId": "mcp_gemini_generate_text",
      "params": {
        "prompt": "Generate usage examples for a README.md for the Smart MCP Server. The server handles tool execution and has a tool-proxy.js module that provides registerTool and executeToolProxy functions. Include examples of registering tools and executing tools through the proxy, with code snippets.",
        "systemInstruction": "You are a technical documentation specialist who writes clear, concise, and informative documentation for software projects.",
        "temperature": 0.4,
        "maxTokens": 1200
      },
      "dependencies": ["setup-gemini-api"]
    },
    {
      "id": "generate-api-documentation",
      "toolId": "mcp_gemini_generate_text",
      "params": {
        "prompt": "Generate API documentation for the Smart MCP Server's main functions. Document the following interfaces:\n1. registerTool(toolId, config) - Registers a tool with the server\n2. executeToolProxy(toolId, params) - Executes a tool with the given parameters\n3. Server configuration options including serverType, serverCommand, and serverOptions\nProvide parameter details and example usage.",
        "systemInstruction": "You are a technical documentation specialist who writes clear, concise, and informative API documentation.",
        "temperature": 0.3,
        "maxTokens": 1500
      },
      "dependencies": ["setup-gemini-api"]
    },
    {
      "id": "generate-configuration-options",
      "toolId": "mcp_gemini_generate_text",
      "params": {
        "prompt": "Generate a section documenting configuration options for the Smart MCP Server. Include environment variables, config files, and runtime options. The server uses dotenv for environment variables and supports configuration for different types of tool servers (stdio, sse, etc.).",
        "systemInstruction": "You are a technical documentation specialist who writes clear, concise, and informative documentation for software projects.",
        "temperature": 0.3,
        "maxTokens": 800
      },
      "dependencies": ["setup-gemini-api"]
    },
    {
      "id": "generate-contributing-guidelines",
      "toolId": "mcp_gemini_generate_text",
      "params": {
        "prompt": "Generate contributing guidelines for the Smart MCP Server project. Include information on how to submit issues, pull requests, coding standards, and test requirements.",
        "systemInstruction": "You are a technical documentation specialist who writes clear, concise, and informative documentation for software projects.",
        "temperature": 0.4,
        "maxTokens": 800
      },
      "dependencies": ["setup-gemini-api"]
    },
    {
      "id": "consolidate-generated-content",
      "toolId": "mcp_sequential_thinking_sequentialthinking",
      "params": {
        "thought": "Analyzing and consolidating all generated content sections into a cohesive README document. Ensuring consistent style, tone, and formatting across all sections. Identifying any gaps or redundancies between sections.",
        "thoughtNumber": 1,
        "totalThoughts": 1,
        "nextThoughtNeeded": false
      },
      "dependencies": [
        "generate-introduction-section",
        "generate-installation-section",
        "generate-usage-examples",
        "generate-api-documentation",
        "generate-configuration-options",
        "generate-contributing-guidelines"
      ]
    },
    {
      "id": "add-badges-and-links",
      "toolId": "edit_file",
      "params": {
        "target_file": "smart-mcp-server/temp/readme-badges.md",
        "instructions": "Creating a file with badges and links to add to the README",
        "code_edit": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Node.js Version](https://img.shields.io/node/v/protocol-tools)](https://nodejs.org/)\n[![npm version](https://badge.fury.io/js/protocol-tools.svg)](https://badge.fury.io/js/protocol-tools)\n[![Build Status](https://github.com/daveweatherall/smart-mcp-server/workflows/Build/badge.svg)](https://github.com/daveweatherall/smart-mcp-server/actions)\n[![Coverage Status](https://coveralls.io/repos/github/daveweatherall/smart-mcp-server/badge.svg?branch=main)](https://coveralls.io/github/daveweatherall/smart-mcp-server?branch=main)"
      },
      "dependencies": ["consolidate-generated-content"]
    },
    {
      "id": "update-readme-file",
      "toolId": "edit_file",
      "params": {
        "target_file": "README.md",
        "instructions": "Updating the README.md with the generated content",
        "code_edit": "# Smart MCP Server\n\n${steps.add-badges-and-links.result}\n\n## Introduction\n\n${steps.generate-introduction-section.result.text}\n\n## Installation\n\n${steps.generate-installation-section.result.text}\n\n## Usage Examples\n\n${steps.generate-usage-examples.result.text}\n\n## API Documentation\n\n${steps.generate-api-documentation.result.text}\n\n## Configuration\n\n${steps.generate-configuration-options.result.text}\n\n## Contributing\n\n${steps.generate-contributing-guidelines.result.text}\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details."
      },
      "dependencies": [
        "add-badges-and-links",
        "consolidate-generated-content"
      ]
    },
    {
      "id": "review-documentation",
      "toolId": "mcp_sequential_thinking_sequentialthinking",
      "params": {
        "thought": "Reviewing the generated README for accuracy, completeness, and clarity. Checking for technical errors, unclear explanations, or missing information. Ensuring all code examples are correct and follow best practices.",
        "thoughtNumber": 1,
        "totalThoughts": 1,
        "nextThoughtNeeded": false
      },
      "dependencies": ["update-readme-file"]
    },
    {
      "id": "incorporate-review-feedback",
      "toolId": "edit_file",
      "params": {
        "target_file": "README.md",
        "instructions": "Incorporating feedback from the review to improve the README",
        "code_edit": "// ... existing code ...\n// This step would use the specific feedback from the review step to make targeted improvements to the README.\n// Since we can't know the exact feedback in advance, this is a placeholder for the actual edits that would be made.\n// ... existing code ..."
      },
      "dependencies": ["review-documentation"]
    },
    {
      "id": "commit-changes",
      "toolId": "run_terminal_cmd",
      "params": {
        "command": "git add README.md",
        "explanation": "Staging the updated README for commit",
        "is_background": false
      },
      "dependencies": ["incorporate-review-feedback"]
    },
    {
      "id": "create-commit",
      "toolId": "run_terminal_cmd",
      "params": {
        "command": "git commit -m \"docs: update README with comprehensive documentation\"",
        "explanation": "Creating a commit with the README changes",
        "is_background": false
      },
      "dependencies": ["commit-changes"]
    },
    {
      "id": "push-changes",
      "toolId": "run_terminal_cmd",
      "params": {
        "command": "git push origin main",
        "explanation": "Pushing the changes to the repository",
        "is_background": false
      },
      "dependencies": ["create-commit"]
    }
  ]
} 